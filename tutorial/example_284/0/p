/*---------------------------------------------------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  1.4                                   |
|   \\  /    A nd           | Web:      http://www.openfoam.org               |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/

// Field Dictionary

FoamFile
{
    version 2.0;
    format ascii;
    class volScalarField;
    object lambda;
}

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

//dimensions      [-1 1 3 2 0 0 0];
dimensions [0 0 0 0 0 0 0];

internalField uniform 0;

vField  #codeStream
{
    codeInclude
    #{
        #include "fvCFD.H"
//                #include "constants.H"
    #};

    codeOptions	//options for compilation
    #{
        -I$(LIB_SRC)/finiteVolume/lnInclude \
        -I$(LIB_SRC)/meshTools/lnInclude \
    #};

    codeLibs	//libs needed to visualize BC in paraview
    #{
        -lmeshTools \
        -lfiniteVolume
    #};

    code
    #{
        const IOdictionary &d = static_cast<const IOdictionary &>(dict);
        const fvMesh &mesh = refCast<const fvMesh>(d.db());
        const pointField& points = mesh.boundary()["dirichletBoundary"].Cf();
        const volScalarField& y = d.db().lookupObject<volScalarField>("y");
        const volScalarField& yd = d.db().lookupObject<volScalarField>("yd");
        label patchi = mesh.boundaryMesh().findPatchID("dirichletBoundary");
        scalarField pb(points.size(), 0);
        scalar lambda2 = 0.01; // need to be updated everytime this is changed in physicalProp dict
        scalar beta = 0.1;
        pb = (lambda2/beta)*(y.boundaryField()[patchi] - yd.boundaryField()[patchi]);
        os << "nonuniform " <<  pb;
    #};
};


boundaryField
{
    dirichletBoundary
    {
        // type		fixedValue;
        // value		uniform 0;
        type robin;
        beta 0.1; // exchange coefficient
        value $vField; //uniform 0.0;
    }

    backAndFront
    {
        type empty;
    }
}
// ************************************************************************* //
