/*---------------------------------------------------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  1.4                                   |
|   \\  /    A nd           | Web:      http://www.openfoam.org               |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/

// Field Dictionary

FoamFile
{
    version         2.0;
    format          ascii;
    class           volScalarField;
    object          y;
}

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

#include "../include/simulationParameters"

//dimensions      [0 0 0 1 0 0 0];
dimensions	[0 0 0 0 0 0 0];

internalField   uniform 0;

ubField #codeStream
{
    codeInclude
    #{
        #include "fvCFD.H"
//                #include "constants.H"
    #};

    codeOptions	//options for compilation
    #{
        -I$(LIB_SRC)/finiteVolume/lnInclude \
        -I$(LIB_SRC)/meshTools/lnInclude \
    #};

    codeLibs	//libs needed to visualize BC in paraview
    #{
        -lmeshTools \
        -lfiniteVolume
    #};

    code
    #{
        const IOdictionary &d = static_cast<const IOdictionary &>(dict);
        const fvMesh &mesh = refCast<const fvMesh>(d.db());
        const pointField& points = mesh.boundary()["right"].Cf();
        const volScalarField& u = d.db().lookupObject<volScalarField>("u");
        label patchi = mesh.boundaryMesh().findPatchID("right");
        scalarField ub(points.size(), 0);
        ub = u.boundaryField()[patchi];
        os << "nonuniform " <<  ub;
    #};
};

boundaryField
{

        left
    {
        type fixedValue;
        value uniform 0;
    }

    top
    {
        type zeroGradient;
    }

    bottom
    {
        type zeroGradient;
    }

    right
    {
        type robin;
        beta $beta; // exchange coefficient
        value $ubField; // ambient temperature
    }

    backAndFront
    {
        type empty;
    }


}
// ************************************************************************* //
